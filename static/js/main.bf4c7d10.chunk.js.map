{"version":3,"sources":["components/Card/index.js","components/Header/index.js","components/Title/index.js","components/Footer/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","gameLogic","id","alt","name","src","image","Header","response","score","topScore","Title","Footer","Container","state","friends","resetState","resetClick","map","friend","clicked","setState","shuffle","arr","length","console","log","cardSelected","filter","cardAlreadySelected","findIndex","obj","indexOf","update","i","val","list","slice","updateState","cardObj","index","newFriends","includes","this","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf4c7d10.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.css'\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className='card' onClick={() => props.gameLogic(props.id)}>\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <main className='headerBar'>\r\n      <div className='game'>Clicky Game</div>\r\n      <div className='response'>{props.response}</div>\r\n      <div className='score'>\r\n        Score: {props.score} | Top Score: {props.topScore}\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nfunction Title() {\r\n  return (\r\n    <div className='title'>\r\n      <h1>Clicky Game!</h1>\r\n      <h2>\r\n        Click on an image to earn points, but don't click on any more than once!\r\n      </h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nfunction Footer () {\r\n  return <footer>React Clicky Game!</footer>\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react'\r\nimport Card from '../Card'\r\nimport Header from '../Header'\r\nimport Title from '../Title'\r\nimport Footer from '../Footer'\r\nimport shuffle from '../../../node_modules/shuffle-array'\r\nimport friends from '../../friends.json'\r\nimport './style.css'\r\n\r\nclass Container extends Component {\r\n  state = {\r\n    friends,\r\n    score: 0,\r\n    topScore: 0,\r\n    response: 'Click a picture to begin'\r\n  }\r\n\r\n  resetState = () => {\r\n    const resetClick = this.state.friends.map(friend => {\r\n      const obj = { ...friend, clicked: false }\r\n      return obj\r\n    })\r\n    return this.setState({\r\n      friends: shuffle([...resetClick]),\r\n      score: 0,\r\n      response: 'You guessed incorrectly!'\r\n    })\r\n  }\r\n\r\n  score = arr => this.setState({ score: arr.length })\r\n\r\n  topScore = () => {\r\n    console.log(this.state.score)\r\n    if (this.state.score >= this.state.topScore) {\r\n      console.log(this.state.score)\r\n      return this.setState({ topScore: this.state.score + 1 })\r\n    }\r\n  }\r\n\r\n  cardSelected = id => this.state.friends.filter(friend => friend.id === id)\r\n\r\n  cardAlreadySelected = () =>\r\n    this.state.friends.filter(friend => friend.clicked)\r\n\r\n  findIndex = (id, arr) => arr.map(obj => obj.id).indexOf(id)\r\n\r\n  update = (i, val, list) => {\r\n    return [...list.slice(0, i), val, ...list.slice(i + 1)]\r\n  }\r\n\r\n  updateState = id => {\r\n    const cardClicked = this.cardSelected(id)[0]\r\n    const cardObj = { ...cardClicked, clicked: true }\r\n    const index = this.findIndex(id, this.state.friends)\r\n    const newFriends = this.update(index, cardObj, this.state.friends)\r\n\r\n    return this.setState({\r\n      friends: shuffle(newFriends),\r\n      score: this.state.score + 1,\r\n      response: 'You guessed correctly!'\r\n    })\r\n  }\r\n\r\n  gameLogic = id => {\r\n    if (this.cardAlreadySelected().includes(...this.cardSelected(id))) {\r\n      return this.resetState()\r\n    }\r\n    this.updateState(id)\r\n    return this.topScore()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <Header\r\n          response={this.state.response}\r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n        />\r\n        <Title />\r\n        <div className='wrapper'>\r\n          {this.state.friends.map(friend => (\r\n            <Card\r\n              gameLogic={this.gameLogic}\r\n              id={friend.id}\r\n              key={friend.id}\r\n              name={friend.name}\r\n              image={friend.image}\r\n              clicked={friend.clicked}\r\n            />\r\n          ))}\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Container\r\n","import React, { Component } from 'react'\nimport Container from './components/Container'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return <Container />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}