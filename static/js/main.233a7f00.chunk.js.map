{"version":3,"sources":["logo.svg","components/Card/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","onClick","gameLogic","id","alt","name","src","image","CardWrapper","state","friends","score","topScore","resetState","resetClick","map","friend","clicked","setState","arr","length","console","log","cardSelected","filter","cardAlreadySelected","findIndex","obj","indexOf","update","i","val","list","slice","updateState","cardObj","index","newFriends","includes","this","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q2FAAAA,EAAOC,QAAU,IAA0B,kC,yJCc5BC,MAXf,SAAcC,GAIZ,OACE,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,MACzD,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,U,2kBC2ExBC,E,2MA9EbC,MAAQ,CACNC,UACAC,MAAO,EACPC,SAAU,G,EAGZC,WAAa,WACX,IAAMC,EAAa,EAAKL,MAAMC,QAAQK,KAAI,SAAAC,GAExC,OADS,KAAQA,EAAR,CAAgBC,SAAS,OAGpC,OAAO,EAAKC,SAAS,CACnBR,QAAQ,YAAKI,GACbH,MAAO,K,EAIXA,MAAQ,SAAAQ,GAAG,OAAI,EAAKD,SAAS,CAAEP,MAAOQ,EAAIC,U,EAE1CR,SAAW,WAET,GADAS,QAAQC,IAAI,EAAKb,MAAME,OACnB,EAAKF,MAAME,MAAQ,EAAKF,MAAMG,SAEhC,OADAS,QAAQC,IAAI,EAAKb,MAAME,OAChB,EAAKO,SAAS,CAAEN,SAAU,EAAKH,MAAME,S,EAIhDY,aAAe,SAAApB,GAAE,OAAI,EAAKM,MAAMC,QAAQc,QAAO,SAAAR,GAAM,OAAIA,EAAOb,KAAOA,M,EAEvEsB,oBAAsB,kBACpB,EAAKhB,MAAMC,QAAQc,QAAO,SAAAR,GAAM,OAAIA,EAAOC,Y,EAE7CS,UAAY,SAACvB,EAAIgB,GAAL,OAAaA,EAAIJ,KAAI,SAAAY,GAAG,OAAIA,EAAIxB,MAAIyB,QAAQzB,I,EAExD0B,OAAS,SAACC,EAAGC,EAAKC,GAChB,MAAM,GAAN,mBAAWA,EAAKC,MAAM,EAAGH,IAAzB,CAA6BC,GAA7B,YAAqCC,EAAKC,MAAMH,EAAI,M,EAGtDI,YAAc,SAAA/B,GACZ,IACMgC,EAAO,KADO,EAAKZ,aAAapB,GAAI,GAC7B,CAAqBc,SAAS,IACrCmB,EAAQ,EAAKV,UAAUvB,EAAI,EAAKM,MAAMC,SACtC2B,EAAa,EAAKR,OAAOO,EAAOD,EAAS,EAAK1B,MAAMC,SAE1D,OAAO,EAAKQ,SAAS,CACnBR,QAAS2B,EACT1B,MAAO,EAAKF,MAAME,MAAQ,K,EAM9BT,UAAY,SAAAC,GAAO,IAAD,EAChB,OAAI,IAAKsB,uBAAsBa,SAA3B,oBAAuC,EAAKf,aAAapB,KACpD,EAAKU,cAEd,EAAKqB,YAAY/B,GACV,EAAKS,a,wEAGJ,IAAD,OACP,OACE,yBAAKZ,UAAU,WACZuC,KAAK9B,MAAMC,QAAQK,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACEd,UAAW,EAAKA,UAChBC,GAAIa,EAAOb,GACXqC,IAAKxB,EAAOb,GACZE,KAAMW,EAAOX,KACbE,MAAOS,EAAOT,MACdU,QAASD,EAAOC,kB,GAvEFwB,aCSXC,G,+MAJX,OAAO,kBAAC,EAAD,U,GAFOD,cCIEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.233a7f00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport './style.css'\r\n\r\nfunction Card(props) {\r\n  // clicked = id => this.state.friends.filter(friend => friend.id === id)\r\n  // () => this.clickedArr(this.props.id)\r\n\r\n  return (\r\n    <div className='card' onClick={() => props.gameLogic(props.id)}>\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\nimport Card from '../Card'\nimport friends from '../../friends.json'\nimport './style.css'\n\nclass CardWrapper extends Component {\n  state = {\n    friends,\n    score: 0,\n    topScore: 0\n  }\n\n  resetState = () => {\n    const resetClick = this.state.friends.map(friend => {\n      const obj = { ...friend, clicked: false }\n      return obj\n    })\n    return this.setState({\n      friends: [...resetClick],\n      score: 0\n    })\n  }\n\n  score = arr => this.setState({ score: arr.length })\n\n  topScore = () => {\n    console.log(this.state.score)\n    if (this.state.score > this.state.topScore) {\n      console.log(this.state.score)\n      return this.setState({ topScore: this.state.score })\n    }\n  }\n\n  cardSelected = id => this.state.friends.filter(friend => friend.id === id)\n\n  cardAlreadySelected = () =>\n    this.state.friends.filter(friend => friend.clicked)\n\n  findIndex = (id, arr) => arr.map(obj => obj.id).indexOf(id)\n\n  update = (i, val, list) => {\n    return [...list.slice(0, i), val, ...list.slice(i + 1)]\n  }\n\n  updateState = id => {\n    const cardClicked = this.cardSelected(id)[0]\n    const cardObj = { ...cardClicked, clicked: true }\n    const index = this.findIndex(id, this.state.friends)\n    const newFriends = this.update(index, cardObj, this.state.friends)\n\n    return this.setState({\n      friends: newFriends,\n      score: this.state.score + 1\n    })\n    // console.log(id)\n    // console.log(arr)\n  }\n\n  gameLogic = id => {\n    if (this.cardAlreadySelected().includes(...this.cardSelected(id))) {\n      return this.resetState()\n    }\n    this.updateState(id)\n    return this.topScore()\n  }\n\n  render() {\n    return (\n      <div className='wrapper'>\n        {this.state.friends.map(friend => (\n          <Card\n            gameLogic={this.gameLogic}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            clicked={friend.clicked}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default CardWrapper\n","import React, { Component } from 'react'\nimport CardWrapper from './components/Wrapper'\nimport Header from './components/Header'\nimport Title from './components/Title'\nimport Footer from './components/Footer'\nimport logo from './logo.svg'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return <CardWrapper />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}